import base64;exec base64.b64decode('IyAgIHNjcmlwdC5saW1waWFya29kaQojICAgQ29weXJpZ2h0IChDKSAyMDE3ICBDYXRvYWwKIwojICAgVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkKIyAgIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5CiMgICB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvcgojICAgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4KIwojICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiMgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgojICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQojICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KIwojICAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UKIyAgIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LgppZiA5NyAtIDk3OiBPT29Pb08wbzBvME9PICsgSUlJSSAuIElpICUgb09PCmlmIDEgLSAxOiBJSSAtIGlpSUlpMWkxSWlpIC0gSTEgLSBJSW9vb08wb29PMG9vICogT09PCmlmIDUgLSA1OiBpMWlJMSArIG8wMG9PMG9vME8wTzAgLSBpaTFJMWlpMUlpSWkxICUgb29vT29PIC0gSWlJSTFJaUkKaW1wb3J0IHhibWMgLCB4Ym1jYWRkb24gLCB4Ym1jZ3VpICwgeGJtY3BsdWdpbiAsIG9zICwgc3lzICwgeGJtY3ZmcyAsIGdsb2IKaW1wb3J0IHNodXRpbAppbXBvcnQgdXJsbGliMiAsIHVybGxpYgppbXBvcnQgcmUKaW1wb3J0IG9zCm9vb28wME9vT29PbzAgPSAnc2NyaXB0LmxpbXBpYXJrb2RpJwpvMG9vME9PID0geGJtYyAuIHRyYW5zbGF0ZVBhdGggKCBvcyAuIHBhdGggLiBqb2luICggJ3NwZWNpYWw6Ly9ob21lL2FkZG9ucy8nICsgb29vbzAwT29Pb09vMCAsICdmYW5hcnQuanBnJyApICkKSTFJaUkxSUlJMTFpID0geGJtYyAuIHRyYW5zbGF0ZVBhdGggKCBvcyAuIHBhdGggLiBqb2luICggJ3NwZWNpYWw6Ly9ob21lL2FkZG9ucy8nICsgb29vbzAwT29Pb09vMCAsICdpY29uLnBuZycgKSApCmlmIDc1IC0gNzU6IG9vb08wT08gKyBpSWlJSTFpMUkgLSBvbzBvICUgT08wTzAwICogT29PMAppaWlpaUlJSTExMTEgPSB4Ym1jIC4gdHJhbnNsYXRlUGF0aCAoICdzcGVjaWFsOi8vdGh1bWJuYWlscycgKSA7Ck8wMDAwT29vMG8wID0gb3MgLiBwYXRoIC4gam9pbiAoIHhibWMgLiB0cmFuc2xhdGVQYXRoICggJ3NwZWNpYWw6Ly9ob21lJyApICwgJ2NhY2hlJyApCmlJID0geGJtYyAuIHRyYW5zbGF0ZVBhdGggKCAnc3BlY2lhbDovL3RlbXAnICkKT08gPSBvcyAuIHBhdGggLiBqb2luICggb3MgLiBwYXRoIC4gam9pbiAoIHhibWMgLiB0cmFuc2xhdGVQYXRoICggJ3NwZWNpYWw6Ly9ob21lJyApICwgJ2FkZG9ucycgKSAsICdzY3JpcHQubGltcGlhcmtvZGknICkKb29PID0gb3MgLiBwYXRoIC4gam9pbiAoIE9PICwgJ21lZGlhJyApCmlJSWlJMUkxaWlJaTEgPSB4Ym1jIC4gdHJhbnNsYXRlUGF0aCAoICdzcGVjaWFsOi8vZGF0YWJhc2UnICkKSWlvb08wbzAwMDAgPSB4Ym1jIC4gdHJhbnNsYXRlUGF0aCAoIG9zIC4gcGF0aCAuIGpvaW4gKCAnc3BlY2lhbDovL2hvbWUvdXNlcmRhdGEvVGh1bWJuYWlscycgLCAnJyApICkKaWYgNTEgLSA1MTogSTFJMWkxaSAlIGlpMUkxaWkxSWlJaTEgLiBvT08gKyBPb08wIC0gSWkgLSBvb29Pb08KaWYgOTggLSA5ODogT09vT29PMG8wbzBPTwppZiAyNyAtIDI3OiBJSW9vb08wb29PMG9vIC4gSUkKaWYgMTIgLSAxMjogaWkxSTFpaTFJaUlpMSArIG9vb08wT08gLiBpSWlJSTFpMUkgJSBPb08wICogaWlJSWkxaTFJaWkKY2xhc3MgTzBPT29vIDoKIGRlZiBfX2luaXRfXyAoIHNlbGYgLCBuYW1laSAsIHBhdGhpICkgOgogIHNlbGYgLiBuYW1lID0gbmFtZWkKICBzZWxmIC4gcGF0aCA9IHBhdGhpCiAgaWYgODAgLSA4MDogSTEgLiBJSSAlIGlJaUlJMWkxSSArIE9PME8wMCArIG8wMG9PMG9vME8wTzAgLyBJMUkxaTFpCiAgaWYgMjQgLSAyNDogb29vT29PICUgaWlJSWkxaTFJaWkgLSBPb08wICUgb29vTzBPTyAlIElpCiAgaWYgNDYgLSA0Njogb29vTzBPTyAvIE9PTyAvIG8wMG9PMG9vME8wTzAKZGVmIGlJTzBPMDBPMDAwMDBvMCAoICkgOgogaWYgNTEgLSA1MTogT09vT29PMG8wbzBPTyAtIE9PME8wMCAuIG8wMG9PMG9vME8wTzAKIElpSTFpaTFJMTFpSSAoICdMaW1waWFyIENhY2hlJyAsICd1cmwnICwgMSAsIEkxSWlJMUlJSTExaSApCiBJaUkxaWkxSTExaUkgKCAnQm9ycmFyIEltYWdlbmVzJyAsICd1cmwnICwgMiAsIEkxSWlJMUlJSTExaSApCiBJaUkxaWkxSTExaUkgKCAnUHVyZ2FyIFBhY2thZ2VzJyAsICd1cmwnICwgMyAsIEkxSWlJMUlJSTExaSApCiBpZiAyMiAtIDIyOiBpaUlJaTFpMUlpaSArIE9Pb09vTzBvMG8wT08gLyBpaTFJMWlpMUlpSWkxIC4gT29PMAogaWYgNDggLSA0ODogSUlJSSAuIElpSUkxSWlJCiBpZiA5NyAtIDk3OiBpaUlJaTFpMUlpaSAqIElpSUkxSWlJICUgb28wbwogaWYgMzkgLSAzOTogSUlvb29PMG9vTzBvbwogaWYgNDAgLSA0MDogaWkxSTFpaTFJaUlpMSAqIG9vb08wT08gLyBJMQpkZWYgSTFpSUkxaTFpICggbmFtZSAsIHVybCAsIGljb25pbWFnZSApIDoKIElJMUlJMUlJMSA9IFRydWUKIEkxaWlJMUkgPSB4Ym1jZ3VpIC4gTGlzdEl0ZW0gKCBuYW1lICwgaWNvbkltYWdlID0gIkRlZmF1bHRWaWRlby5wbmciICwgdGh1bWJuYWlsSW1hZ2UgPSBpY29uaW1hZ2UgKQogSTFpaUkxSSAuIHNldEluZm8gKCB0eXBlID0gIlZpZGVvIiAsIGluZm9MYWJlbHMgPSB7ICJUaXRsZSIgOiBuYW1lIH0gKQogSUkxSUkxSUkxID0geGJtY3BsdWdpbiAuIGFkZERpcmVjdG9yeUl0ZW0gKCBoYW5kbGUgPSBpbnQgKCBzeXMgLiBhcmd2IFsgMSBdICkgLCB1cmwgPSB1cmwgLCBsaXN0aXRlbSA9IEkxaWlJMUkgKQogcmV0dXJuIElJMUlJMUlJMQogaWYgMTIgLSAxMjogaWkxSTFpaTFJaUlpMQogaWYgNjAgLSA2MDogaTFpSTEgJSBvMDBvTzBvbzBPME8wCmRlZiBJSWlJaWlJMWlpMTEgKCBuYW1lICwgdXJsICwgbW9kZSAsIGljb25pbWFnZSApIDoKIGkxMWkxSWkgPSBzeXMgLiBhcmd2IFsgMCBdICsgIj91cmw9IiArIHVybGxpYiAuIHF1b3RlX3BsdXMgKCB1cmwgKSArICImbW9kZT0iICsgc3RyICggbW9kZSApICsgIiZuYW1lPSIgKyB1cmxsaWIgLiBxdW90ZV9wbHVzICggbmFtZSApCiBJSTFJSTFJSTEgPSBUcnVlCiBJMWlpSTFJID0geGJtY2d1aSAuIExpc3RJdGVtICggbmFtZSAsIGljb25JbWFnZSA9ICJEZWZhdWx0Rm9sZGVyLnBuZyIgLCB0aHVtYm5haWxJbWFnZSA9IGljb25pbWFnZSApCiBJMWlpSTFJIC4gc2V0SW5mbyAoIHR5cGUgPSAiVmlkZW8iICwgaW5mb0xhYmVscyA9IHsgIlRpdGxlIiA6IG5hbWUgfSApCiBpZiAyOSAtIDI5OiBPb08wICsgT08wTzAwIC4gSWkgLyBvb29PME9PICogSWkKIElJMUlJMUlJMSA9IHhibWNwbHVnaW4gLiBhZGREaXJlY3RvcnlJdGVtICggaGFuZGxlID0gaW50ICggc3lzIC4gYXJndiBbIDEgXSApICwgdXJsID0gaTExaTFJaSAsIGxpc3RpdGVtID0gSTFpaUkxSSAsIGlzRm9sZGVyID0gVHJ1ZSApCiByZXR1cm4gSUkxSUkxSUkxCiBpZiA1MyAtIDUzOiBJMUkxaTFpICogaWlJSWkxaTFJaWkgKyBvb29PME9PIC4gaWlJSWkxaTFJaWkgKiBJMSAqIE9Pb09vTzBvMG8wT08KZGVmIElpSTFpaTFJMTFpSSAoIG5hbWUgLCB1cmwgLCBtb2RlICwgaWNvbmltYWdlICkgOgogaTExaTFJaSA9IHN5cyAuIGFyZ3YgWyAwIF0gKyAiP3VybD0iICsgdXJsbGliIC4gcXVvdGVfcGx1cyAoIHVybCApICsgIiZtb2RlPSIgKyBzdHIgKCBtb2RlICkgKyAiJm5hbWU9IiArIHVybGxpYiAuIHF1b3RlX3BsdXMgKCBuYW1lICkKIElJMUlJMUlJMSA9IFRydWUKIEkxaWlJMUkgPSB4Ym1jZ3VpIC4gTGlzdEl0ZW0gKCBuYW1lICwgaWNvbkltYWdlID0gIkRlZmF1bHRGb2xkZXIucG5nIiAsIHRodW1ibmFpbEltYWdlID0gaWNvbmltYWdlICkKIEkxaWlJMUkgLiBzZXRJbmZvICggdHlwZSA9ICJWaWRlbyIgLCBpbmZvTGFiZWxzID0geyAiVGl0bGUiIDogbmFtZSB9ICkKIEkxaWlJMUkgLiBzZXRQcm9wZXJ0eSAoICdmYW5hcnRfaW1hZ2UnICwgbzBvbzBPTyApCiBJSTFJSTFJSTEgPSB4Ym1jcGx1Z2luIC4gYWRkRGlyZWN0b3J5SXRlbSAoIGhhbmRsZSA9IGludCAoIHN5cyAuIGFyZ3YgWyAxIF0gKSAsIHVybCA9IGkxMWkxSWkgLCBsaXN0aXRlbSA9IEkxaWlJMUkgLCBpc0ZvbGRlciA9IEZhbHNlICkKIHJldHVybiBJSTFJSTFJSTEKIGlmIDcwIC0gNzA6IElJICsgaTFpSTEgLyBvb29Pb08KIGlmIDUxIC0gNTE6IElJSUkgLyBpaUlJaTFpMUlpaQogaWYgNTYgLSA1NjogaTFpSTEKIGlmIDQ2IC0gNDY6IG9vb08wT08gLSBPb08wIC0gSWlJSTFJaUkKIGlmIDYzIC0gNjM6IEkxIC0gT29PMCAqIEkxIC0gaWlJSWkxaTFJaWkKZGVmIG9vb09vbzBvMG8gKCApIDoKIEkxaUlpMTFJaTFJMTEgPSBbIF0KIGlpSUlpMWlpID0gc3lzIC4gYXJndiBbIDIgXQogaWYgbGVuICggaWlJSWkxaWkgKSA+PSAyIDoKICBPME9PbyA9IHN5cyAuIGFyZ3YgWyAyIF0KICBpMUlpaWkxMWlpID0gTzBPT28gLiByZXBsYWNlICggJz8nICwgJycgKQogIGlmICggTzBPT28gWyBsZW4gKCBPME9PbyApIC0gMSBdID09ICcvJyApIDoKICAgTzBPT28gPSBPME9PbyBbIDAgOiBsZW4gKCBPME9PbyApIC0gMiBdCiAgSWlJaWlpSSA9IGkxSWlpaTExaWkgLiBzcGxpdCAoICcmJyApCiAgSTFpSWkxMUlpMUkxMSA9IHsgfQogIGZvciBJMUlpaTEgaW4gcmFuZ2UgKCBsZW4gKCBJaUlpaWlJICkgKSA6CiAgIGlJaUkxaWlJSTFJaSA9IHsgfQogICBpSWlJMWlpSUkxSWkgPSBJaUlpaWlJIFsgSTFJaWkxIF0gLiBzcGxpdCAoICc9JyApCiAgIGlmICggbGVuICggaUlpSTFpaUlJMUlpICkgKSA9PSAyIDoKICAgIEkxaUlpMTFJaTFJMTEgWyBpSWlJMWlpSUkxSWkgWyAwIF0gXSA9IGlJaUkxaWlJSTFJaSBbIDEgXQogICAgaWYgODIgLSA4MjogSWkgLSBpaUlJaTFpMUlpaSArIG8wMG9PMG9vME8wTzAKIHJldHVybiBJMWlJaTExSWkxSTExCiBpZiA3NSAtIDc1OiBJSW9vb08wb29PMG9vICogSUlvb29PMG9vTzBvbyAuIElJSUkgJSBJSW9vb08wb29PMG9vCiBpZiAyNyAtIDI3OiBpSWlJSTFpMUkKIGlmIDQyIC0gNDI6IGlJaUlJMWkxSSAvIE9PTyAtIEkxSTFpMWkgKyBpaTFJMWlpMUlpSWkxCiBpZiAxNiAtIDE2OiBJSUlJICsgT29PMApkZWYgSTFpICggKSA6CiBvT09vMDBPbzBPID0gNQogT09vMG9PT09PMCA9IFsgIldURiIgLCAiNG9EIiAsICJCQkMgaVBsYXllciIgLCAiU2ltcGxlIERvd25sb2FkZXIiICwgIklUViIgXQogaTExMUlJaWlJMUkgPSBbICJzcGVjaWFsOi8vcHJvZmlsZS9hZGRvbl9kYXRhL3BsdWdpbi52aWRlby53aGF0dGhlZnVyay9jYWNoZSIgLCAic3BlY2lhbDovL3Byb2ZpbGUvYWRkb25fZGF0YS9wbHVnaW4udmlkZW8uNG9kL2NhY2hlIiAsCiAic3BlY2lhbDovL3Byb2ZpbGUvYWRkb25fZGF0YS9wbHVnaW4udmlkZW8uaXBsYXllci9pcGxheWVyX2h0dHBfY2FjaGUiICwgInNwZWNpYWw6Ly9wcm9maWxlL2FkZG9uX2RhdGEvc2NyaXB0Lm1vZHVsZS5zaW1wbGUuZG93bmxvYWRlciIgLAogInNwZWNpYWw6Ly9wcm9maWxlL2FkZG9uX2RhdGEvcGx1Z2luLnZpZGVvLml0di9JbWFnZXMiIF0KIGlmIDkyIC0gOTI6IElJSUkKIG9PID0gWyBdCiBpZiA2IC0gNjogb29vT29PICUgSTEgLiBJSW9vb08wb29PMG9vICUgaWkxSTFpaTFJaUlpMQogZm9yIG8wTzBvb28wbzAwIGluIHJhbmdlICggb09PbzAwT28wTyApIDoKICBvTyAuIGFwcGVuZCAoIE8wT09vbyAoIE9PbzBvT09PTzAgWyBvME8wb29vMG8wMCBdICwgaTExMUlJaWlJMUkgWyBvME8wb29vMG8wMCBdICkgKQogIGlmIDEyIC0gMTI6IG9PTyArIG9vb09vTyAlIElJb29vTzBvb08wb28gKiBJSQogcmV0dXJuIG9PCiBpZiA5NyAtIDk3OiBJSUlJIC4gaUlpSUkxaTFJICogb29vTzBPTwogaWYgNSAtIDU6IGlJaUlJMWkxSSArIG9vb09vTyAuIG9vb08wT08gJSBvT08gLSBvb29Pb08gKyBPT29Pb08wbzBvME9PCmRlZiBpaUlJMSAoICkgOgogaWYgNjYgLSA2NjogaTFpSTEgJSBJMSAqIEkxCiBpZiBvcyAuIHBhdGggLiBleGlzdHMgKCBPMDAwME9vbzBvMCApID09IFRydWUgOgogIGZvciBPT28wb28gLCBpMWlpMSAsIGlJMTExMUkgaW4gb3MgLiB3YWxrICggTzAwMDBPb28wbzAgKSA6CiAgIGkxMWkxID0gMAogICBpMTFpMSArPSBsZW4gKCBpSTExMTFJICkKICAgaWYgaTExaTEgPiAwIDoKICAgIGlmIDM1IC0gMzU6IG8wMG9PMG9vME8wTzAgLiBPb08wICUgb09PCiAgICBPMDAwT09vMG9vMCA9IHhibWNndWkgLiBEaWFsb2cgKCApCiAgICBpZiBPMDAwT09vMG9vMCAuIHllc25vICggIkJvcnJhciBLb2RpIENhY2hlIiAsIHN0ciAoIGkxMWkxICkgKyAiIEFyY2hpdm9zIEVuY29udHJhZG9zIiAsICJMb3MgRWxpbWluYW1vcz8iICkgOgogICAgIGlmIDkwIC0gOTA6IG9vb09vTyAlIEkxSTFpMWkgJSBpSWlJSTFpMUkgKyBJSW9vb08wb29PMG9vCiAgICAgZm9yIElpaWlJaWlJSUkgaW4gaUkxMTExSSA6CiAgICAgIHRyeSA6CiAgICAgICBpZiAoIElpaWlJaWlJSUkgPT0gInhibWMubG9nIiBvciBJaWlpSWlpSUlJID09ICJ4Ym1jLm9sZC5sb2ciICkgOiBjb250aW51ZQogICAgICAgb3MgLiB1bmxpbmsgKCBvcyAuIHBhdGggLiBqb2luICggT09vMG9vICwgSWlpaUlpaUlJSSApICkKICAgICAgZXhjZXB0IDoKICAgICAgIHBhc3MKICAgICBmb3IgSTFJaWlJIGluIGkxaWkxIDoKICAgICAgdHJ5IDoKICAgICAgIHNodXRpbCAuIHJtdHJlZSAoIG9zIC4gcGF0aCAuIGpvaW4gKCBPT28wb28gLCBJMUlpaUkgKSApCiAgICAgIGV4Y2VwdCA6CiAgICAgICBwYXNzCiAgICAgICBpZiA4NyAtIDg3OiBJSSAuIGlJaUlJMWkxSSAuIGkxaUkxICsgb29vT29PICogT09PCiAgIGVsc2UgOgogICAgcGFzcwogaWYgb3MgLiBwYXRoIC4gZXhpc3RzICggaUkgKSA9PSBUcnVlIDoKICBmb3IgT09vMG9vICwgaTFpaTEgLCBpSTExMTFJIGluIG9zIC4gd2FsayAoIGlJICkgOgogICBpMTFpMSA9IDAKICAgaTExaTEgKz0gbGVuICggaUkxMTExSSApCiAgIGlmIGkxMWkxID4gMCA6CiAgICBPMDAwT09vMG9vMCA9IHhibWNndWkgLiBEaWFsb2cgKCApCiAgICBpZiBPMDAwT09vMG9vMCAuIHllc25vICggIkJvcnJhciBLb2RpIEFyY2hpdm9zIFRlbXBvcmFsZXMiICwgc3RyICggaTExaTEgKSArICIgQXJjaGl2b3MgRW5jb250cmFkb3MiICwgIkxvcyBFbGltaW5hbW9zPyIgKSA6CiAgICAgZm9yIElpaWlJaWlJSUkgaW4gaUkxMTExSSA6CiAgICAgIHRyeSA6CiAgICAgICBpZiAoIElpaWlJaWlJSUkgPT0gInhibWMubG9nIiBvciBJaWlpSWlpSUlJID09ICJ4Ym1jLm9sZC5sb2ciICkgOiBjb250aW51ZQogICAgICAgb3MgLiB1bmxpbmsgKCBvcyAuIHBhdGggLiBqb2luICggT09vMG9vICwgSWlpaUlpaUlJSSApICkKICAgICAgZXhjZXB0IDoKICAgICAgIHBhc3MKICAgICBmb3IgSTFJaWlJIGluIGkxaWkxIDoKICAgICAgdHJ5IDoKICAgICAgIHNodXRpbCAuIHJtdHJlZSAoIG9zIC4gcGF0aCAuIGpvaW4gKCBPT28wb28gLCBJMUlpaUkgKSApCiAgICAgIGV4Y2VwdCA6CiAgICAgICBwYXNzCiAgICAgICBpZiAxNyAtIDE3OiBPT29Pb08wbzBvME9PICogSWkKICAgZWxzZSA6CiAgICBwYXNzCiBpZiB4Ym1jIC4gZ2V0Q29uZFZpc2liaWxpdHkgKCAnc3lzdGVtLnBsYXRmb3JtLkFUVjInICkgOgogIGlJaTExaUlJSTEgPSBvcyAuIHBhdGggLiBqb2luICggJy9wcml2YXRlL3Zhci9tb2JpbGUvTGlicmFyeS9DYWNoZXMvQXBwbGVUVi9WaWRlby8nICwgJ090aGVyJyApCiAgaWYgNDIgLSA0MjogaUlpSUkxaTFJICogb29vT29PIC4gSWlJSTFJaUkgKyBJSUlJICogT09vT29PMG8wbzBPTwogIGZvciBPT28wb28gLCBpMWlpMSAsIGlJMTExMUkgaW4gb3MgLiB3YWxrICggaUlpMTFpSUlJMSApIDoKICAgaTExaTEgPSAwCiAgIGkxMWkxICs9IGxlbiAoIGlJMTExMUkgKQogICBpZiA3NyAtIDc3OiBJSUlJIC4gSTEKICAgaWYgaTExaTEgPiAwIDoKICAgIGlmIDk0IC0gOTQ6IElJb29vTzBvb08wb28gKyBvb29Pb08KICAgIE8wMDBPT28wb28wID0geGJtY2d1aSAuIERpYWxvZyAoICkKICAgIGlmIE8wMDBPT28wb28wIC4geWVzbm8gKCAiQm9ycmFyIEFUVjIgQ2FjaGUiICwgc3RyICggaTExaTEgKSArICIgQXJjaGl2b3MgRW5jb250cmFkb3MnIiAsICJMb3MgRWxpbWluYW1vcz8iICkgOgogICAgIGlmIDU2IC0gNTY6IE9vTzAgJSBJaUlJMUlpSSAuIElJIC8gT09PCiAgICAgZm9yIElpaWlJaWlJSUkgaW4gaUkxMTExSSA6CiAgICAgIG9zIC4gdW5saW5rICggb3MgLiBwYXRoIC4gam9pbiAoIE9PbzBvbyAsIElpaWlJaWlJSUkgKSApCiAgICAgZm9yIEkxSWlpSSBpbiBpMWlpMSA6CiAgICAgIHNodXRpbCAuIHJtdHJlZSAoIG9zIC4gcGF0aCAuIGpvaW4gKCBPT28wb28gLCBJMUlpaUkgKSApCiAgICAgIGlmIDI2IC0gMjY6IE9vTzAgLiBJSUlJICUgaUlpSUkxaTFJCiAgIGVsc2UgOgogICAgcGFzcwogIEkxSWlJMWlpMWkxaTEgPSBvcyAuIHBhdGggLiBqb2luICggJy9wcml2YXRlL3Zhci9tb2JpbGUvTGlicmFyeS9DYWNoZXMvQXBwbGVUVi9WaWRlby8nICwgJ0xvY2FsQW5kUmVudGFsJyApCiAgaWYgMjMgLSAyMzogSUkgLyBvT08gLyBJaUlJMUlpSSAtIEkxSTFpMWkgLSBvb29PME9PICUgb29vTzBPTwogIGZvciBPT28wb28gLCBpMWlpMSAsIGlJMTExMUkgaW4gb3MgLiB3YWxrICggSTFJaUkxaWkxaTFpMSApIDoKICAgaTExaTEgPSAwCiAgIGkxMWkxICs9IGxlbiAoIGlJMTExMUkgKQogICBpZiA5NCAtIDk0OiBJSW9vb08wb29PMG9vICUgbzAwb08wb28wTzBPMCAqIGlpMUkxaWkxSWlJaTEgLiBvb29Pb08gLyBpSWlJSTFpMUkgKiBPT29Pb08wbzBvME9PCiAgIGlmIGkxMWkxID4gMCA6CiAgICBpZiA2MSAtIDYxOiBvMDBvTzBvbzBPME8wICogaUlpSUkxaTFJICsgb29vTzBPTyAvIG9vb09vTwogICAgTzAwME9PbzBvbzAgPSB4Ym1jZ3VpIC4gRGlhbG9nICggKQogICAgaWYgTzAwME9PbzBvbzAgLiB5ZXNubyAoICJCb3JyYXIgQVRWMiBDYWNoZSBGaWxlcyIgLCBzdHIgKCBpMTFpMSApICsgIiBhcmNoaXZvcyBlbiAnTG9jYWxBbmRSZW50YWwnIiAsICJMb3MgRWxpbWluYW1vcz8iICkgOgogICAgIGlmIDM5IC0gMzk6IGkxaUkxICUgb09PIC4gbzAwb08wb28wTzBPMCAtIG9vb08wT08gKiBJMUkxaTFpCiAgICAgZm9yIElpaWlJaWlJSUkgaW4gaUkxMTExSSA6CiAgICAgIG9zIC4gdW5saW5rICggb3MgLiBwYXRoIC4gam9pbiAoIE9PbzBvbyAsIElpaWlJaWlJSUkgKSApCiAgICAgZm9yIEkxSWlpSSBpbiBpMWlpMSA6CiAgICAgIHNodXRpbCAuIHJtdHJlZSAoIG9zIC4gcGF0aCAuIGpvaW4gKCBPT28wb28gLCBJMUlpaUkgKSApCiAgICAgIGlmIDI3IC0gMjc6IElpCiAgIGVsc2UgOgogICAgcGFzcwogICAgaWYgOTQgLSA5NDogT29PMCAtIG9vb09vTwogb08gPSBJMWkgKCApCiBpZiA3MCAtIDcwOiBpSWlJSTFpMUkgLiBpaUlJaTFpMUlpaSAqIEkxSTFpMWkKIGZvciBvT28wMG8wMG8wIGluIG9PIDoKICBpSUkxID0geGJtYyAuIHRyYW5zbGF0ZVBhdGggKCBvT28wMG8wMG8wIC4gcGF0aCApCiAgaWYgb3MgLiBwYXRoIC4gZXhpc3RzICggaUlJMSApID09IFRydWUgOgogICBmb3IgT09vMG9vICwgaTFpaTEgLCBpSTExMTFJIGluIG9zIC4gd2FsayAoIGlJSTEgKSA6CiAgICBpMTFpMSA9IDAKICAgIGkxMWkxICs9IGxlbiAoIGlJMTExMUkgKQogICAgaWYgaTExaTEgPiAwIDoKICAgICBpZiA5NSAtIDk1OiBJSSArIG9vb08wT08gLyBJSUlJICsgb28wbwogICAgIE8wMDBPT28wb28wID0geGJtY2d1aSAuIERpYWxvZyAoICkKICAgICBpZiBPMDAwT09vMG9vMCAuIHllc25vICggIk1hbmFnZXIiICwgc3RyICggaTExaTEgKSArICIlcyBBcmNoaXZvcyBFbmNvbnRyYWRvcyIgJSAoIG9PbzAwbzAwbzAgLiBuYW1lICkgLCAiTG9zIEVsaW1pbmFtb3M/IiApIDoKICAgICAgZm9yIElpaWlJaWlJSUkgaW4gaUkxMTExSSA6CiAgICAgICBvcyAuIHVubGluayAoIG9zIC4gcGF0aCAuIGpvaW4gKCBPT28wb28gLCBJaWlpSWlpSUlJICkgKQogICAgICBmb3IgSTFJaWlJIGluIGkxaWkxIDoKICAgICAgIHNodXRpbCAuIHJtdHJlZSAoIG9zIC4gcGF0aCAuIGpvaW4gKCBPT28wb28gLCBJMUlpaUkgKSApCiAgICAgICBpZiA4NSAtIDg1OiBPb08wIC4gSUkgKiBJSW9vb08wb29PMG9vICUgSUkgJSBJaSAtIG9vb08wT08KICAgIGVsc2UgOgogICAgIHBhc3MKICAgICBpZiAxMDAgLSAxMDA6IElJICogT09vT29PMG8wbzBPTyArIE9PTyAqIGlpMUkxaWkxSWlJaTEgKiBPT08KICAgICBpZiA4NCAtIDg0OiBpSWlJSTFpMUkgKyBvT08gLiBJMUkxaTFpICUgT29PMCAlIElpSUkxSWlJICogaWlJSWkxaTFJaWkKIE8wMDBPT28wb28wID0geGJtY2d1aSAuIERpYWxvZyAoICkKIE8wMDBPT28wb28wIC4gb2sgKCAiTGltcGlhZG8iICwgIkVsaW1pbmFkb3MgYXJjaGl2b3MgY2FjaGUiICkKIGlmIDI2IC0gMjY6IGlpSUlpMWkxSWlpIC4gb28wbwogaWYgNDcgLSA0Nzogb28wbyAtIG8wMG9PMG9vME8wTzAgLSBJSQpkZWYgSTFJSUlJMSAoICkgOgogaWYgNDggLSA0ODogSTFJMWkxaSAuIElJCiBpZiBvcyAuIHBhdGggLiBleGlzdHMgKCBpaWlpaUlJSTExMTEgKSA9PSBUcnVlIDoKICBPMDAwT09vMG9vMCA9IHhibWNndWkgLiBEaWFsb2cgKCApCiAgaWYgTzAwME9PbzBvbzAgLiB5ZXNubyAoICJCb3JyYXIgSW1hZ2VuZXMiICwgIkVzdGEgT3BjaW9uIEJvcnJhIGxhcyBJbWFnZW5lcyIgLCAiRXN0YXMgU2VndXJvPyIgKSA6CiAgIGZvciBPT28wb28gLCBpMWlpMSAsIGlJMTExMUkgaW4gb3MgLiB3YWxrICggaWlpaWlJSUkxMTExICkgOgogICAgaTExaTEgPSAwCiAgICBpMTFpMSArPSBsZW4gKCBpSTExMTFJICkKICAgIGlmIGkxMWkxID4gMCA6CiAgICAgZm9yIElpaWlJaWlJSUkgaW4gaUkxMTExSSA6CiAgICAgIHRyeSA6CiAgICAgICBvcyAuIHVubGluayAoIG9zIC4gcGF0aCAuIGpvaW4gKCBPT28wb28gLCBJaWlpSWlpSUlJICkgKQogICAgICBleGNlcHQgOgogICAgICAgcGFzcwogICAgICAgaWYgODYgLSA4NjogT09PIC8gSWlJSTFJaUkgKiBJaUlJMUlpSSAqIG8wMG9PMG9vME8wTzAKICAgICAgIGlmIDkwIC0gOTA6IEkxIC0gSTFJMWkxaSAlIE9Pb09vTzBvMG8wT08gLSBPT08gLiBpMWlJMSAvIElJSUkKIGlmIG9zIC4gcGF0aCAuIGV4aXN0cyAoIElpb29PMG8wMDAwICkgOgogIHRyeSA6CiAgIGZvciBPT28wb28gLCBpMWlpMSAsIGlJMTExMUkgaW4gb3MgLiB3YWxrICggSWlvb08wbzAwMDAgKSA6CiAgICBpMTFpMSA9IDAKICAgIGkxMWkxICs9IGxlbiAoIGlJMTExMUkgKQogICAgaWYgMTAgLSAxMDogT09vT29PMG8wbzBPTyAuIElJIC0gSWkgLiBJSUlJIC4gT09vT29PMG8wbzBPTwogICAgaWYgaTExaTEgPiAwIDoKICAgICBmb3IgSWlpaUlpaUlJSSBpbiBpSTExMTFJIDogb3MgLiB1bmxpbmsgKCBvcyAuIHBhdGggLiBqb2luICggT09vMG9vICwgSWlpaUlpaUlJSSApICkKICAgICBmb3IgSTFJaWlJIGluIGkxaWkxIDogc2h1dGlsIC4gcm10cmVlICggb3MgLiBwYXRoIC4gam9pbiAoIE9PbzBvbyAsIEkxSWlpSSApICkKICBleGNlcHQgOgogICBwYXNzCiAgIGlmIDEwIC0gMTA6IElpSUkxSWlJICsgT09vT29PMG8wbzBPTyAvIG9vb09vTyArIElJb29vTzBvb08wb28gLSBJMQogdHJ5IDoKICBPT29PbzBPTyA9IG9zIC4gcGF0aCAuIGpvaW4gKCBpSUlpSTFJMWlpSWkxICwgIlRleHR1cmVzMTMuZGIiICkKICBvcyAuIHVubGluayAoIE9Pb09vME9PICkKIGV4Y2VwdCA6CiAgcGFzcwogTzAwME9PbzBvbzAgLiBvayAoICJSZWluaWNpYSBLb2RpIiAsICJQb3IgRmF2b3IgcmVpbmljaWEga29kaSBwYXJhIHJlc3RhYmxlY2VyIGxhcyBpbWFnZW5lcyIgKQogaWYgMTAwIC0gMTAwOiBJaUlJMUlpSSArIG9PTwpkZWYgaWlpaUlpICggKSA6CiBpZiA1NCAtIDU0OiBPTzBPMDAKIElpSWkxaUlpMSA9IHhibWMgLiB0cmFuc2xhdGVQYXRoICggJ3NwZWNpYWw6Ly9ob21lL2FkZG9ucy9wYWNrYWdlcycgKQogTzAwME9PbzBvbzAgPSB4Ym1jZ3VpIC4gRGlhbG9nICggKQogZm9yIE9PbzBvbyAsIGkxaWkxICwgaUkxMTExSSBpbiBvcyAuIHdhbGsgKCBJaUlpMWlJaTEgKSA6CiAgaTExaTEgPSAwCiAgaTExaTEgKz0gbGVuICggaUkxMTExSSApCiBpZiBPMDAwT09vMG9vMCAuIHllc25vICggIkJvcnJhciBQYWNrYWdlIiAsICIlZCBwYWNrYWdlcyBFbmNvbnRyYWRvcy4iICUgaTExaTEgLCAiTG9zIEVsaW1pbmFtb3M/IiApIDoKICBmb3IgT09vMG9vICwgaTFpaTEgLCBpSTExMTFJIGluIG9zIC4gd2FsayAoIElpSWkxaUlpMSApIDoKICAgaTExaTEgPSAwCiAgIGkxMWkxICs9IGxlbiAoIGlJMTExMUkgKQogICBpZiBpMTFpMSA+IDAgOgogICAgZm9yIElpaWlJaWlJSUkgaW4gaUkxMTExSSA6CiAgICAgb3MgLiB1bmxpbmsgKCBvcyAuIHBhdGggLiBqb2luICggT09vMG9vICwgSWlpaUlpaUlJSSApICkKICAgIGZvciBJMUlpaUkgaW4gaTFpaTEgOgogICAgIHNodXRpbCAuIHJtdHJlZSAoIG9zIC4gcGF0aCAuIGpvaW4gKCBPT28wb28gLCBJMUlpaUkgKSApCiAgICBPMDAwT09vMG9vMCA9IHhibWNndWkgLiBEaWFsb2cgKCApCiAgICBPMDAwT09vMG9vMCAuIG9rICggIkxpbXBpYWRvIiAsICJFbGltaW5hbWRvcyBQYWNrYWdlcyIgKQogICBlbHNlIDoKICAgIE8wMDBPT28wb28wID0geGJtY2d1aSAuIERpYWxvZyAoICkKICAgIE8wMDBPT28wb28wIC4gb2sgKCAiTGltcGlhZG8iICwgIkVsaW1pbmFkb3MgUGFja2FnZXMiICkKICAgIGlmIDE0IC0gMTQ6IElJSUkKICAgIGlmIDk0IC0gOTQ6IGkxaUkxICogSWlJSTFJaUkgJSBPTzBPMDAgKiBJSSAlIElJCiAgICBpZiAxMyAtIDEzOiBpaTFJMWlpMUlpSWkxICsgaWkxSTFpaTFJaUlpMSAvIE9PTyAtIG9vMG8KICAgIGlmIDEgLSAxOiBvT08KICAgIGlmIDEgLSAxOiBPT29Pb08wbzBvME9PICsgSUlJSSArIGlpSUlpMWkxSWlpCiAgICBpZiAyMiAtIDIyOiBvbzBvICogT09vT29PMG8wbzBPTyAtIE9Pb09vTzBvMG8wT08gJSBvMDBvTzBvbzBPME8wIC8gb28wbyAqIGlpSUlpMWkxSWlpCk8wT09vID0gb29vT29vMG8wbyAoICkKb09PT08wID0gTm9uZQpvb08wbzBvTzBvID0gTm9uZQpvbzAwb29PME8wID0gTm9uZQppZiA2MiAtIDYyOiBvMDBvTzBvbzBPME8wIC8gb29vT29PIC8gb09PICsgaTFpSTEgJSBJaUlJMUlpSQp0cnkgOgogb09PT08wID0gdXJsbGliIC4gdW5xdW90ZV9wbHVzICggTzBPT28gWyAidXJsIiBdICkKZXhjZXB0IDoKIHBhc3MKdHJ5IDoKIG9vTzBvMG9PMG8gPSB1cmxsaWIgLiB1bnF1b3RlX3BsdXMgKCBPME9PbyBbICJuYW1lIiBdICkKZXhjZXB0IDoKIHBhc3MKdHJ5IDoKIG9vMDBvb08wTzAgPSBpbnQgKCBPME9PbyBbICJtb2RlIiBdICkKZXhjZXB0IDoKIHBhc3MKIGlmIDcxIC0gNzE6IE9PME8wMCAuIG9PTyAuIG9vb08wT08gKiBJaQppZiBvbzAwb29PME8wID09IE5vbmUgb3Igb09PT08wID09IE5vbmUgb3IgbGVuICggb09PT08wICkgPCAxIDoKIGlJTzBPMDBPMDAwMDBvMCAoICkKIGlmIDk5IC0gOTk6IEkxICUgSWkgKiBvMDBvTzBvbzBPME8wICsgaWlJSWkxaTFJaWkKZWxpZiBvbzAwb29PME8wID09IDEgOgogaWlJSTEgKCApCiBpZiA0OSAtIDQ5OiBvT08gKyBvMDBvTzBvbzBPME8wIC0gT08wTzAwCmVsaWYgb28wMG9vTzBPMCA9PSAyIDoKIEkxSUlJSTEgKCApCiBpZiA0MiAtIDQyOiBJaUlJMUlpSSAqIGlpMUkxaWkxSWlJaTEgKiBvb29Pb08gKiBPT29Pb08wbzBvME9PIC4gSWlJSTFJaUkgLSBvb29Pb08KZWxpZiBvbzAwb29PME8wID09IDMgOgogaWlpaUlpICggKQogaWYgNDQgLSA0NDogb29vTzBPTwp4Ym1jcGx1Z2luIC4gZW5kT2ZEaXJlY3RvcnkgKCBpbnQgKCBzeXMgLiBhcmd2IFsgMSBdICkgKQppZiAzMiAtIDMyOiBJSW9vb08wb29PMG9vIC0gT09PIC8gb29vT29PCiMgODA3Y2IxYmZmZmIyMzRkYWNlM2Y5MzBmNTcxYTkwMzlkNzZmNGNmOQo=')