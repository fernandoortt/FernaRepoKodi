import base64;exec base64.b64decode('# -*- coding: utf-8 -*-
import sys
import re
import os
import xbmcgui
import xbmc
import HTMLParser
import xbmcplugin
import urllib
import urllib2
import sqlite3
import base64
import zlib
from urllib2 import HTTPError
from urllib2 import URLError
import traceback
if 97 - 97: OOoOoO0o0o0OO + IIII . Ii % oOO
if 1 - 1: II - iiIIi1i1Iii - I1 - IIoooO0ooO0oo * OOO
if 5 - 5: i1iI1 + o00oO0oo0O0O0 - ii1I1ii1IiIi1 % oooOoO - IiII1IiI
def oooo00OoOoOo0 ( text ) :
 o0oo0OO = '7Se10gAIe-T0_a'
 if 25 - 25: oO0O * Oo00O0oOooO0O - oOOoO - O0O
 o0oo0OO = base64 . urlsafe_b64decode ( 'N1NlMTBnQUllLVQwX2E=' )
 try :
  Ooo0o = base64 . urlsafe_b64decode ( str ( text ) )
  OOO0O00O0 = [ ]
  for i1ii1i in xrange ( len ( Ooo0o ) ) :
   iIII1 = o0oo0OO [ i1ii1i % len ( o0oo0OO ) ]
   OO000000Ooo = chr ( ord ( Ooo0o [ i1ii1i ] ) - ord ( iIII1 ) % 256 )
   OOO0O00O0 . append ( OO000000Ooo )
  oOOoO00oO0o = '' . join ( OOO0O00O0 )
  return oOOoO00oO0o
 except TypeError , iiI1IIiI :
  return text
  if 77 - 77: ii1i1ii1I * Ii1111I11i1I - oOOoO
  if 64 - 64: oO0O . OOoOoO0o0o0OO . OOO - ii1I1ii1IiIi1 . oooOoO * Ii
  if 63 - 63: OOoOoO0o0o0OO . iiIIi1i1Iii / IIoooO0ooO0oo . Ii / IIoooO0ooO0oo % ii1I1ii1IiIi1
  if 3 - 3: Oo00O0oOooO0O % ii1i1ii1I * Ii1111I11i1I / OOO * Ii1111I11i1I
  if 51 - 51: iiIIi1i1Iii . Ii1111I11i1I % OOoOoO0o0o0OO
  if 31 - 31: i1iI1 / i1iI1 % II * Ii1111I11i1I - II
def OOo0000oO ( ) :
 return 'eJzLKCkpsNLXL8-sSixKSU4syU_M0UstrgRi_YDEnMS8kswiAO2-DU0='
 if 48 - 48: iiIIi1i1Iii % OOO
 if 52 - 52: II
def I111I11I11111 ( bas ) :
 IIIii1Ii = sqlite3 . connect ( bas )
 OO0o = IIIii1Ii . cursor ( )
 I11iIiIIi = ''
 if 28 - 28: IIII
 try :
  if 56 - 56: iiIIi1i1Iii + IIII . Ii1111I11i1I - ii1i1ii1I + oO0O / IiII1IiI
  OO0o . execute ( base64 . urlsafe_b64decode ( 'U2VsZWN0IGxvYyBmcm9tIHZlcnNpb24=' ) )
  oO = OO0o . fetchone ( )
  I11iIiIIi = oO [ 0 ]
  IIIii1Ii . close ( )
 except :
  try :
   IIIii1Ii . close ( )
  except :
   pass
   if 40 - 40: ii1I1ii1IiIi1 * oO0O / I1
  try :
   os . remove ( bas )
  except :
   pass
 return str ( I11iIiIIi . strip ( ) )
 if 28 - 28: Oo00O0oOooO0O - o00oO0oo0O0O0 / ii1i1ii1I + Ii1111I11i1I / Ii
 if 41 - 41: i1iI1 - OOO % O0O - IIoooO0ooO0oo + O0O
def I1iiI1I ( url , post = None ) :
 if 12 - 12: ii1I1ii1IiIi1
 oOOO00OoOo = { 'User-Agent' : 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.8.1.14) Gecko/20080404 Firefox/2.0.0.14' }
 Iii11IiI11i = urllib2 . urlopen
 oo0O0 = urllib2 . Request
 Ii11 = oo0O0 ( url , post , oOOO00OoOo )
 I11Iii11i1Ii1 = Iii11IiI11i ( Ii11 )
 iiII = I11Iii11i1Ii1 . read ( )
 return iiII
 if 51 - 51: IIII / iiIIi1i1Iii
def oOOO0O0 ( bd , id , val , type ) :
 try :
  I11iIiIIi = zlib . decompress ( base64 . urlsafe_b64decode ( I111I11I11111 ( bd ) ) )
  if 67 - 67: ii1I1ii1IiIi1 - ii1i1ii1I + oooOoO * I1
  I1i = ( base64 . urlsafe_b64decode ( 'JXMvQmFzZURhdG9zL3F1YWxpdHkucGhwP3R5cGU9JXNpZD0lcyZ2YWw9JXM=' ) ) % (
 I11iIiIIi , type , id , str ( val ) )
  I1iiI1I ( I1i )
  Ii1i = id . split ( '-' )
  if 76 - 76: ii1i1ii1I + ii1i1ii1I
  IIIii1Ii = sqlite3 . connect ( bd )
  OO0o = IIIii1Ii . cursor ( )
  if type == 'series' :
   if Ii1i [ 2 ] :
    if 79 - 79: II + Ii1111I11i1I
    OO0o . execute ( base64 . urlsafe_b64decode (
 'VVBEQVRFIGNhcGl0dWxvcyBTRVQgcXVhbGl0eT0_IFdIRVJFIHNlcmllX2lkID0gPyBBTkQgdGVtcF9pZCA9ID8gQU5EIGNhcGl0dWxvX2lkID0gPw==' ) ,
 ( str ( val ) , int ( Ii1i [ 0 ] ) , int ( Ii1i [ 1 ] ) , Ii1i [ 2 ] , ) )
   elif Ii1i [ 1 ] :
    if 81 - 81: Ii1111I11i1I . O0O + IIII * oOO
    OO0o . execute ( base64 . urlsafe_b64decode ( 'VVBEQVRFIHNlcmllc190ZW1wIFNFVCBxdWFsaXR5PT8gV0hFUkUgc2VyaWVfaWQgPSA_IEFORCB0ZW1wX2lkID0gPw==' ) ,
 ( str ( val ) , int ( Ii1i [ 0 ] ) , int ( Ii1i [ 1 ] ) , ) )
   elif Ii1i [ 0 ] :
    if 53 - 53: OOO
    OO0o . execute ( base64 . urlsafe_b64decode ( 'VVBEQVRFIHNlcmllcyBTRVQgcXVhbGl0eT0_IFdIRVJFIHNlcmllX2lkID0gPw==' ) ,
 ( str ( val ) , int ( Ii1i [ 0 ] ) , ) )
  else :
   if 36 - 36: oO0O
   OO0o . execute ( base64 . urlsafe_b64decode ( 'VVBEQVRFIHBlbGlzIFNFVCBxdWFsaXR5PT8gV0hFUkUgcGVsaV9pZCA9ID8=' ) ,
 ( str ( val ) , int ( Ii1i [ 0 ] ) , ) )
  IIIii1Ii . commit ( )
  IIIii1Ii . close ( )
 except Exception as iiI1IIiI :
  pass
  if 16 - 16: oO0O
  if 74 - 74: OOO * IIoooO0ooO0oo
def i11Ii ( link , bd , id , temp_id = 0 ) :
 i1iii1IiIi = [ ]
 try :
  ii1I1Iii = { 'User-agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:19.0) Gecko/20100101 Firefox/19.0' }
  I1i = oooo00OoOoOo0 ( str ( link ) )
  ii1I1Iii [ 'referer' ] = '/' . join ( I1i . split ( '/' ) [ : 4 ] )
  ii1I1Iii [ 'connection' ] = 'keep-alive'
  Ii11 = urllib2 . Request ( I1i , None , ii1I1Iii )
  I11Iii11i1Ii1 = urllib2 . urlopen ( Ii11 )
  iiII = I11Iii11i1Ii1 . read ( )
  I11Iii11i1Ii1 . close ( )
  o0OoO0o = '/' . join ( I1i . split ( '/' ) [ 0 : 5 ] )
  i1Ii1II = re . findall ( 'class="list_row".*data-file-id="(.*?)"' , iiII )
  if 11 - 11: o00oO0oo0O0O0 / oooOoO % Ii1111I11i1I
  i1iIii = re . findall ( 'class="name">\s*<a.*data-action-before="preview".*>(.*?)</a>' , iiII )
  oo0OOO0O = HTMLParser . HTMLParser ( )
  if 16 - 16: IIII + ii1i1ii1I
  if len ( i1Ii1II ) > 0 :
   try :
    IIIii1Ii = sqlite3 . connect ( bd )
    OO0o = IIIii1Ii . cursor ( )
    if temp_id > 0 :
     if 15 - 15: oOOoO . O0O . oO0O + o00oO0oo0O0O0 - ii1i1ii1I / Oo00O0oOooO0O
     OO0o . execute ( base64 . urlsafe_b64decode ( 'c2VsZWN0IG5fZXBpIGZyb20gc2VyaWVzX3RlbXAgV0hFUkUgc2VyaWVfaWQgPSA_IEFORCB0ZW1wX2lkID0gPw==' ) , ( id , temp_id , ) )
    else :
     if 35 - 35: o00oO0oo0O0O0 % o00oO0oo0O0O0
     OO0o . execute ( base64 . urlsafe_b64decode ( 'c2VsZWN0IG5fZXBpIGZyb20gc2VyaWVzIFdIRVJFIHNlcmllX2lkID0gPw==' ) , ( id , ) )
    oO = OO0o . fetchone ( )
    IIIii1Ii . close ( )
    if oO [ 0 ] < len ( i1Ii1II ) :
     I11iIiIIi = zlib . decompress ( base64 . urlsafe_b64decode ( I111I11I11111 ( bd ) ) )
     if temp_id > 0 :
      if 52 - 52: IIII - iiIIi1i1Iii % oooOoO - IIoooO0ooO0oo + O0O
      I1i = ( base64 . urlsafe_b64decode ( 'JXMvQmFzZURhdG9zL2VwaS5waHA_aWQ9JXMmdGVtcD0lcyZ2YWw9JXM=' ) ) % (
 I11iIiIIi , id , temp_id , str ( len ( i1Ii1II ) ) )
     else :
      if 7 - 7: O0O % oO0O * i1iI1
      I1i = ( base64 . urlsafe_b64decode ( 'JXMvQmFzZURhdG9zL2VwaS5waHA_aWQ9JXMmdmFsPSVz' ) ) % (
 I11iIiIIi , id , str ( len ( i1Ii1II ) ) )
     I1iiI1I ( I1i )
     if 56 - 56: oooOoO . Oo00O0oOooO0O
     IIIii1Ii = sqlite3 . connect ( bd )
     OO0o = IIIii1Ii . cursor ( )
     if temp_id > 0 :
      if 48 - 48: IIII . Ii % i1iI1 . o00oO0oo0O0O0 . oooOoO % Ii
      OO0o . execute ( base64 . urlsafe_b64decode ( 'VVBEQVRFIHNlcmllc190ZW1wIFNFVCBuX2VwaT0_IFdIRVJFIHNlcmllX2lkID0gPyBBTkQgdGVtcF9pZCA9ID8=' ) , ( len ( i1Ii1II ) , id , temp_id , ) )
     else :
      if 32 - 32: ii1I1ii1IiIi1 + I1 - Ii1111I11i1I % oOOoO + oOO
      OO0o . execute ( base64 . urlsafe_b64decode ( 'VVBEQVRFIHNlcmllcyBTRVQgbl9lcGk9PyBXSEVSRSBzZXJpZV9pZCA9ID8=' ) , ( len ( i1Ii1II ) , id , ) )
     IIIii1Ii . commit ( )
     IIIii1Ii . close ( )
   except Exception as iiI1IIiI :
    pass
  for ii11iIIi1I in xrange ( 0 , len ( i1Ii1II ) ) :
   i1iii1IiIi . append ( ( oo0OOO0O . unescape ( i1iIii [ ii11iIIi1I ] . decode ( 'utf-8' ) ) , o0Oo ( '%s/p,%s,list,1,3.avi' % ( o0OoO0o , i1Ii1II [ ii11iIIi1I ] ) ) ) )
 except ( HTTPError , URLError ) as iiI1IIiI :
  I1i1I1iI11I = xbmcgui . ListItem ( 'Enlace borrado' , iconImage = 'DefaultVideo.png' )
  xbmcplugin . setResolvedUrl ( int ( sys . argv [ 1 ] ) , False , I1i1I1iI11I )
  iiIIiiII1 = xbmcgui . Dialog ( )
  iiIIiiII1 . notification ( 'Palantir' , 'Enlace borrado' , xbmcgui . NOTIFICATION_WARNING , 5000 )
 return i1iii1IiIi
 if 66 - 66: i1iI1 % I1 * I1
def OOo0oo ( url , decode = True ) :
 if decode :
  url = oooo00OoOoOo0 ( url )
  if 6 - 6: ii1i1ii1I / oOO / Oo00O0oOooO0O
 if base64 . urlsafe_b64decode ( 'ZGlza29rb3NtaWtv' ) in url :
  return base64 . urlsafe_b64decode ( 'ZGs=' )
  if 10 - 10: oooOoO + oO0O * oO0O
 elif base64 . urlsafe_b64decode ( 'Y29waWFwb3A=' ) in url :
  return base64 . urlsafe_b64decode ( 'Y3A=' )
  if 79 - 79: I1 / IiII1IiI / ii1i1ii1I
 elif base64 . urlsafe_b64decode ( 'c3RyZWFtY2xvdWQ=' ) in url :
  return base64 . urlsafe_b64decode ( 'c2M=' )
  if 9 - 9: i1iI1 + o00oO0oo0O0O0 . ii1i1ii1I % oooOoO . oO0O
 elif base64 . urlsafe_b64decode ( 'cGFydGFnb3Jh' ) in url :
  return base64 . urlsafe_b64decode ( 'cHQ=' )
  if 82 - 82: oOOoO * i1iI1 - oO0O . iiIIi1i1Iii . O0O % o00oO0oo0O0O0
 elif base64 . urlsafe_b64decode ( 'a2JhZ2k=' ) in url :
  return base64 . urlsafe_b64decode ( 'a2I=' )
  if 76 - 76: Ii1111I11i1I % Oo00O0oOooO0O + OOO + ii1I1ii1IiIi1
 elif base64 . urlsafe_b64decode ( 'cnR2ZQ==' ) in url :
  return base64 . urlsafe_b64decode ( 'cmU=' )
  if 67 - 67: II
 elif base64 . urlsafe_b64decode ( 'eW91dHViZQ==' ) in url :
  return base64 . urlsafe_b64decode ( 'eXQ=' )
  if 24 - 24: II / oooOoO - OOoOoO0o0o0OO - ii1I1ii1IiIi1
 else :
  return base64 . urlsafe_b64decode ( 'dWs=' )
  if 40 - 40: II - IIoooO0ooO0oo / Oo00O0oOooO0O * II . Ii
  if 78 - 78: oOOoO + OOO - oOO
def IiiIi11iIII1 ( server , link ) :
 I1iII11ii1iii = link . split ( '/' )
 IIIIO0oOooOoOo0 = '/' . join ( I1iII11ii1iii [ 3 : 4 ] )
 oOO00OoO0oo = '/' . join ( I1iII11ii1iii [ 4 : 5 ] )
 link = I1iII11ii1iii [ 5 ] . split ( ',' ) [ 1 ]
 oo0o0ooooO = link
 O000000O0OoOo = '%s/-%s/p,%s,list,1,3.avi' % ( IIIIO0oOooOoOo0 , oOO00OoO0oo , link )
 I1i = '%s/%s/' % ( server , IIIIO0oOooOoOo0 )
 ii1I1Iii = { 'User-agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:19.0) Gecko/20100101 Firefox/19.0' }
 OoOO0OO0o0O = '%s/%s' % ( server , O000000O0OoOo )
 ii1I1Iii [ 'referer' ] = I1i
 ii1I1Iii [ 'connection' ] = 'keep-alive'
 Ii11 = urllib2 . Request ( OoOO0OO0o0O , None , ii1I1Iii )
 I11Iii11i1Ii1 = urllib2 . urlopen ( Ii11 )
 iiII = I11Iii11i1Ii1 . read ( )
 I11Iii11i1Ii1 . close ( )
 IIiiII111i = re . findall ( 'DownloadFile.*f=%s".*RequestVerificationToken.*?value="([^"]+)' % link , iiII )
 iiI1I1Ii11i1I = 0
 try :
  IIiiII111i = IIiiII111i [ 0 ]
 except :
  iiI1I1Ii11i1I = 1
  if 21 - 21: II + Ii1111I11i1I * Oo00O0oOooO0O / II * ii1i1ii1I
 if iiI1I1Ii11i1I == 0 :
  iII1 = '%s/action/DownloadFile?location=fi&amp;f=%s' % ( server , oo0o0ooooO )
  Ooo0Oo = 'fileId=%s&__RequestVerificationToken=%s' % ( oo0o0ooooO , IIiiII111i )
  ii1I1Iii [ 'referer' ] = OoOO0OO0o0O
  ii1I1Iii [ 'connection' ] = 'keep-alive'
  Ii11 = urllib2 . Request ( iII1 , Ooo0Oo , ii1I1Iii )
  I11Iii11i1Ii1 = urllib2 . urlopen ( Ii11 )
  iiII = I11Iii11i1Ii1 . read ( )
  I11Iii11i1Ii1 . close ( )
  link = re . findall ( 'DownloadUrl":"([^"]+)' , iiII )
  Oo00o0O0oOo0 = link [ 0 ]
 else :
  Oo00o0O0oOo0 = ''
 return Oo00o0O0oOo0 . strip ( )
 if 100 - 100: II * OOoOoO0o0o0OO + OOO * ii1I1ii1IiIi1 * OOO
 if 84 - 84: Oo00O0oOooO0O + oOO . Ii1111I11i1I % ii1i1ii1I % IiII1IiI * iiIIi1i1Iii
 if 26 - 26: iiIIi1i1Iii . oOOoO
def o0Oo ( string ) :
 o0oo0OO = '7Se10gAIe-T0_a'
 OOO0O00O0 = [ ]
 for i1ii1i in xrange ( len ( string ) ) :
  iIII1 = o0oo0OO [ i1ii1i % len ( o0oo0OO ) ]
  OO000000Ooo = chr ( ord ( string [ i1ii1i ] ) + ord ( iIII1 ) % 256 )
  OOO0O00O0 . append ( OO000000Ooo )
 oOOoO00oO0o = '' . join ( OOO0O00O0 )
 return base64 . urlsafe_b64encode ( oOOoO00oO0o )
 if 47 - 47: oOOoO - o00oO0oo0O0O0 - II
 if 21 - 21: Oo00O0oOooO0O + o00oO0oo0O0O0 - i1iI1 - IiII1IiI
def i1 ( server , link ) :
 I1iII11ii1iii = link . split ( '/' )
 IIIIO0oOooOoOo0 = '/' . join ( I1iII11ii1iii [ 3 : 4 ] )
 oOO00OoO0oo = '/' . join ( I1iII11ii1iii [ 4 : 5 ] )
 link = I1iII11ii1iii [ 5 ] . split ( ',' ) [ 1 ]
 IiI1I1II = 'http://%s/%s/z-%s/z,%s,list,1,2.bin' % ( server , IIIIO0oOooOoOo0 , oOO00OoO0oo , link )
 Ooo0Oo = None
 oOOO00OoOo = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oOOO00OoOo [ 'Connection' ] = 'keep-alive'
 Iii11IiI11i = urllib2 . urlopen
 oo0O0 = urllib2 . Request
 Ii11 = oo0O0 ( IiI1I1II , Ooo0Oo , oOOO00OoOo )
 I11Iii11i1Ii1 = Iii11IiI11i ( Ii11 )
 Oo00OooO = I11Iii11i1Ii1 . info ( ) [ 'Set-Cookie' ]
 iiII = I11Iii11i1Ii1 . read ( )
 i1Ii1II = re . search ( 'action="(\\/action\\/DownloadFile\\?location=fi&amp;f=.*?)".*?__RequestVerificationToken.*?value="(.*?)"' , iiII )
 ii = 'http://%s%s' % ( server , i1Ii1II . group ( 1 ) . replace ( '&amp;' , '&' ) )
 IIiiII111i = i1Ii1II . group ( 2 )
 oOOO00OoOo = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oOOO00OoOo [ 'Referer' ] = IiI1I1II
 oOOO00OoOo [ 'Cookie' ] = Oo00OooO
 oOOO00OoOo [ 'Connection' ] = 'keep-alive'
 Ooo0Oo = 'fileId=%s&__RequestVerificationToken=%s' % ( link , IIiiII111i )
 Iii11IiI11i = urllib2 . urlopen
 oo0O0 = urllib2 . Request
 Ii11 = oo0O0 ( ii , Ooo0Oo , oOOO00OoOo )
 I11Iii11i1Ii1 = Iii11IiI11i ( Ii11 )
 iiII = I11Iii11i1Ii1 . read ( )
 import time
 oOiii = str ( int ( time . time ( ) ) ) + '404'
 OoOO0OO0o0O = 'http://%s/action/OAuth/Facebook?TimeStamp=%s' % ( server , oOiii )
 oOOO00OoOo = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oOOO00OoOo [ 'Referer' ] = IiI1I1II
 oOOO00OoOo [ 'Cookie' ] = Oo00OooO
 oOOO00OoOo [ 'Connection' ] = 'keep-alive'
 Ooo0Oo = None
 Iii11IiI11i = urllib2 . urlopen
 oo0O0 = urllib2 . Request
 Ii11 = oo0O0 ( OoOO0OO0o0O , Ooo0Oo , oOOO00OoOo )
 I11Iii11i1Ii1 = Iii11IiI11i ( Ii11 )
 iIIiiIIIIi = I11Iii11i1Ii1 . info ( ) [ 'Set-Cookie' ]
 iiII = I11Iii11i1Ii1 . read ( )
 OOoOo0OO = Oo00OooO . split ( ';' )
 oOoOoOo = iIIiiIIIIi . split ( ';' )
 for iiIi1I1ii in oOoOoOo :
  if iiIi1I1ii not in OOoOo0OO :
   OOoOo0OO . append ( iiIi1I1ii )
   if 18 - 18: II + I1 % iiIIi1i1Iii - Ii * IIII . ii1i1ii1I
 oOoOoOo = [ ]
 for iiIi1I1ii in OOoOo0OO :
  if 'path=/' not in iiIi1I1ii and 'HttpOnly' not in iiIi1I1ii :
   oOoOoOo . append ( iiIi1I1ii )
   if 82 - 82: oO0O + O0O - oO0O * II / oooOoO . IIoooO0ooO0oo
 Oo00OooO = '; ' . join ( oOoOoOo ) . replace ( '  ' , ' ' )
 iII1 = 'http://%s/action/Account/Login' % server
 oOOO00OoOo = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oOOO00OoOo [ 'Accept' ] = '*/*'
 oOOO00OoOo [ 'Accept-Language' ] = 'es-ES,es;q=0.8,en-US;q=0.5,en;q=0.3'
 oOOO00OoOo [ 'Accept-Encoding' ] = 'gzip, deflate'
 oOOO00OoOo [ 'Content-Type' ] = 'application/x-www-form-urlencoded; charset=UTF-8'
 oOOO00OoOo [ 'X-Requested-With' ] = 'XMLHttpRequest'
 oOOO00OoOo [ 'Referer' ] = IiI1I1II
 oOOO00OoOo [ 'Cookie' ] = Oo00OooO
 oOOO00OoOo [ 'Connection' ] = 'keep-alive'
 Ooo0Oo = '__RequestVerificationToken=%s&UserName=amistad&Password=asegurada' % IIiiII111i
 Iii11IiI11i = urllib2 . urlopen
 oo0O0 = urllib2 . Request
 Ii11 = oo0O0 ( iII1 , Ooo0Oo , oOOO00OoOo )
 I11Iii11i1Ii1 = Iii11IiI11i ( Ii11 )
 iIIiiIIIIi = I11Iii11i1Ii1 . info ( ) [ 'Set-Cookie' ]
 iiII = I11Iii11i1Ii1 . read ( )
 OOoOo0OO = Oo00OooO . split ( ';' )
 oOoOoOo = iIIiiIIIIi . split ( ';' )
 for iiIi1I1ii in oOoOoOo :
  if iiIi1I1ii not in OOoOo0OO :
   OOoOo0OO . append ( iiIi1I1ii )
   if 59 - 59: o00oO0oo0O0O0 - OOO
 oOoOoOo = [ ]
 for iiIi1I1ii in OOoOo0OO :
  if 'path=/' not in iiIi1I1ii and 'HttpOnly' not in iiIi1I1ii :
   oOoOoOo . append ( iiIi1I1ii )
   if 81 - 81: IIII
 Oo00OooO = '; ' . join ( oOoOoOo ) . replace ( '  ' , ' ' )
 iIIiiIIIIi = ''
 oOOO00OoOo = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0' }
 oOOO00OoOo [ 'Referer' ] = IiI1I1II
 oOOO00OoOo [ 'Cookie' ] = Oo00OooO
 oOOO00OoOo [ 'Connection' ] = 'keep-alive'
 Ooo0Oo = 'fileId=%s&__RequestVerificationToken=%s' % ( link , IIiiII111i )
 Iii11IiI11i = urllib2 . urlopen
 oo0O0 = urllib2 . Request
 Ii11 = oo0O0 ( ii , Ooo0Oo , oOOO00OoOo )
 I11Iii11i1Ii1 = Iii11IiI11i ( Ii11 )
 iiII = I11Iii11i1Ii1 . read ( )
 i1Ii1II = re . search ( 'DownloadUrl":"(.*?)"' , iiII )
 return i1Ii1II . group ( 1 )
 if 17 - 17: i1iI1
 if 50 - 50: i1iI1
def i111 ( link ) :
 oooO00o0oO = re . findall ( 'list=(.*?)(?:&|\s|$)+' , oooo00OoOoOo0 ( link ) , flags = re . DOTALL )
 II11i1iI = [ ]
 if len ( oooO00o0oO ) > 0 :
  for i1ii1i in oooO00o0oO :
   II11i1iI . append ( 'plugin://plugin.video.youtube/playlist/%s/' % str ( oooO00o0oO [ 0 ] ) )
  return II11i1iI
 else :
  return None
  if 77 - 77: OOoOoO0o0o0OO * ii1I1ii1IiIi1
  if 81 - 81: IIII - oO0O
def IiiI1I1I1iIiI ( ser , titulo , base , id , type ) :
 iII1Ii1ii11 = int ( sys . argv [ 1 ] )
 try :
  I11iIiIIi = zlib . decompress ( base64 . urlsafe_b64decode ( I111I11I11111 ( base ) ) )
  if 15 - 15: oO0O - O0O / OOO . iiIIi1i1Iii - OOO + i1iI1
  I1i = ( base64 . urlsafe_b64decode ( 'JXMvQmFzZURhdG9zL3ZpZXdzLnBocD9pZD0lcyZ0eXBlPSVz' ) ) % ( I11iIiIIi , id , type )
  I1iiI1I ( I1i )
  if 17 - 17: O0O - Ii1111I11i1I + IiII1IiI * Ii1111I11i1I
  IIIii1Ii = sqlite3 . connect ( base )
  OO0o = IIIii1Ii . cursor ( )
  if type == 'series' :
   if 59 - 59: IIII - ii1I1ii1IiIi1 . oooOoO % IIII + I1 % IIoooO0ooO0oo
   OO0o . execute ( base64 . urlsafe_b64decode ( 'dXBkYXRlIHNlcmllcyBzZXQgdmlld3M9dmlld3MrMSB3aGVyZSBzZXJpZV9pZCA9ID8=' ) , ( id , ) )
  else :
   if 53 - 53: OOO / IIII - oOO
   OO0o . execute ( base64 . urlsafe_b64decode ( 'dXBkYXRlIHBlbGlzIHNldCB2aWV3cz12aWV3cysxIHdoZXJlIHBlbGlfaWQgPSA_' ) , ( id , ) )
  IIIii1Ii . commit ( )
  IIIii1Ii . close ( )
 except :
  pass
 ser = oooo00OoOoOo0 ( ser )
 o0oOOoO = ser . split ( ' ' )
 if not o0oOOoO :
  III1IiI1iIiI = 'Video en preparaci\xc3\xb3n'
  I1i1I1iI11I = xbmcgui . ListItem ( III1IiI1iIiI , iconImage = 'DefaultVideo.png' )
  xbmcplugin . setResolvedUrl ( iII1Ii1ii11 , False , I1i1I1iI11I )
  iiIIiiII1 = xbmcgui . Dialog ( )
  iiIIiiII1 . notification ( 'Palantir' , III1IiI1iIiI , xbmcgui . NOTIFICATION_INFO , 5000 )
 for i1ii1i in xrange ( len ( o0oOOoO ) ) :
  iI = o0oOOoO [ i1ii1i ]
  IiI11i111 = OOo0oo ( iI , False )
  if 2 - 2: oooOoO
  OOoOoOO = base64 . urlsafe_b64decode ( titulo )
  if 57 - 57: OOoOoO0o0o0OO * IiII1IiI - o00oO0oo0O0O0
  if 79 - 79: IIII % IiII1IiI + o00oO0oo0O0O0 . oooOoO . oooOoO + IIII
  if 58 - 58: i1iI1 % Ii1111I11i1I . II + IIoooO0ooO0oo + II
  if 66 - 66: IIoooO0ooO0oo . i1iI1 - OOoOoO0o0o0OO . II % IIII
  if 16 - 16: IiII1IiI * I1 * I1
  if 89 - 89: OOoOoO0o0o0OO + oOO . IiII1IiI
  if 26 - 26: II / oooOoO / Ii + oOOoO
  if 93 - 93: IiII1IiI + OOO % o00oO0oo0O0O0
  if IiI11i111 == 'kb' :
   Oo00o0O0oOo0 = i1 ( 'kbagi.com' , iI )
   if Oo00o0O0oOo0 == '' and i1ii1i == len ( o0oOOoO ) :
    III1IiI1iIiI = 'El enlace ya no existe'
    I1i1I1iI11I = xbmcgui . ListItem ( III1IiI1iIiI , iconImage = 'DefaultVideo.png' )
    xbmcplugin . setResolvedUrl ( iII1Ii1ii11 , False , I1i1I1iI11I )
    iiIIiiII1 = xbmcgui . Dialog ( )
    iiIIiiII1 . notification ( 'Palantir' , III1IiI1iIiI , xbmcgui . NOTIFICATION_INFO , 5000 )
    break
   elif Oo00o0O0oOo0 != '' :
    Oo00o0O0oOo0 = i1 ( 'kbagi.com' , iI )
    I1i1I1iI11I = xbmcgui . ListItem ( path = Oo00o0O0oOo0 . strip ( ) )
    I1i1I1iI11I . setInfo ( 'video' , { 'title' : OOoOoOO } )
    xbmcplugin . setResolvedUrl ( iII1Ii1ii11 , True , I1i1I1iI11I )
    break
  elif IiI11i111 == 'dk' :
   Oo00o0O0oOo0 = IiiIi11iIII1 ( base64 . urlsafe_b64decode ( 'aHR0cDovL2Rpc2tva29zbWlrby5teA==' ) , iI )
   if Oo00o0O0oOo0 == '' and i1ii1i == len ( o0oOOoO ) :
    III1IiI1iIiI = 'El enlace ya no existe'
    I1i1I1iI11I = xbmcgui . ListItem ( III1IiI1iIiI , iconImage = 'DefaultVideo.png' )
    xbmcplugin . setResolvedUrl ( iII1Ii1ii11 , False , I1i1I1iI11I )
    iiIIiiII1 = xbmcgui . Dialog ( )
    iiIIiiII1 . notification ( 'Palantir' , III1IiI1iIiI , xbmcgui . NOTIFICATION_INFO , 5000 )
    break
   elif Oo00o0O0oOo0 != '' :
    I1i1I1iI11I = xbmcgui . ListItem ( path = Oo00o0O0oOo0 . strip ( ) )
    I1i1I1iI11I . setInfo ( 'video' , { 'title' : OOoOoOO } )
    xbmcplugin . setResolvedUrl ( iII1Ii1ii11 , True , I1i1I1iI11I )
    break
  elif IiI11i111 == 're' or IiI11i111 == 'yt' :
   if IiI11i111 == 'yt' :
    Oo00o0O0oOo0 = i111 ( iI )
   else :
    Oo00o0O0oOo0 = iI
   I1i1I1iI11I = xbmcgui . ListItem ( path = Oo00o0O0oOo0 . strip ( ) )
   I1i1I1iI11I . setInfo ( 'video' , { 'title' : OOoOoOO } )
   xbmcplugin . setResolvedUrl ( iII1Ii1ii11 , True , I1i1I1iI11I )
   break
  elif IiI11i111 == 'sc' :
   I1i = iI
   iiII = I1iiI1I ( iI )
   if '<h1>File Not Found</h1>' in iiII or '<h1>Archivo no encontrado</h1>' in iiII or iiII == 'Not Found' :
    if i1ii1i == len ( o0oOOoO ) :
     III1IiI1iIiI = 'El enlace ya no existe'
     I1i1I1iI11I = xbmcgui . ListItem ( III1IiI1iIiI , iconImage = 'DefaultVideo.png' )
     xbmcplugin . setResolvedUrl ( iII1Ii1ii11 , False , I1i1I1iI11I )
     iiIIiiII1 = xbmcgui . Dialog ( )
     iiIIiiII1 . notification ( 'Palantir' , III1IiI1iIiI , xbmcgui . NOTIFICATION_INFO , 5000 )
   else :
    Oo00o0O0oOo0 = re . findall ( 'file\\: "([^"]+)"' , iiII , flags = re . DOTALL )
    if not Oo00o0O0oOo0 :
     Ooo0Oo = ''
     O000OO00 = re . findall ( '<input.*?name="([^"]+)".*?value="([^"]*)">' , iiII , flags = re . DOTALL )
     for i1IiI1iI11iiI , oOOoOoOOOo in O000OO00 :
      Ooo0Oo += i1IiI1iI11iiI + '=' + oOOoOoOOOo + '&'
      if 88 - 88: oOOoO * oO0O * IIII + oO0O
     Ooo0Oo = Ooo0Oo . replace ( 'op=download1' , 'op=download2' )
     iiII = I1iiI1I ( I1i , post = Ooo0Oo )
     if 'id="justanotice"' in iiII :
      return [ ]
     Oo00o0O0oOo0 = re . findall ( 'file\\: "([^"]+)"' , iiII , flags = re . DOTALL )
    try :
     Oo00o0O0oOo0 = Oo00o0O0oOo0 [ 0 ]
     I1i1I1iI11I = xbmcgui . ListItem ( path = Oo00o0O0oOo0 )
     I1i1I1iI11I . setInfo ( 'video' , { 'title' : OOoOoOO } )
     xbmcplugin . setResolvedUrl ( iII1Ii1ii11 , True , I1i1I1iI11I )
     break
    except :
     pass
  else :
   III1IiI1iIiI = 'Servidor no soportado'
   I1i1I1iI11I = xbmcgui . ListItem ( III1IiI1iIiI , iconImage = 'DefaultVideo.png' )
   xbmcplugin . setResolvedUrl ( iII1Ii1ii11 , False , I1i1I1iI11I )
   iiIIiiII1 = xbmcgui . Dialog ( )
   iiIIiiII1 . notification ( 'Palantir' , III1IiI1iIiI , xbmcgui . NOTIFICATION_INFO , 5000 )
   if 42 - 42: oOO . ii1i1ii1I % IIII + Ii1111I11i1I
   if 57 - 57: OOO * oooOoO * I1 . O0O - Ii
def I111I1iIi ( bas , data ) :
 i1ii1i11iII = data . split ( '.' )
 if i1ii1i11iII [ 0 ] == 'cp' :
  i1ii1i11iII = i1 ( base64 . urlsafe_b64decode ( 'Y29waWFwb3AuY29t' ) , i1ii1i11iII [ 1 ] )
 elif i1ii1i11iII [ 0 ] == 'dk' :
  i1ii1i11iII = IiiIi11iIII1 ( base64 . urlsafe_b64decode ( 'aHR0cDovL2Rpc2tva29zbWlrby5teA==' ) , i1ii1i11iII [ 1 ] )
 else :
  if 60 - 60: IIoooO0ooO0oo * oooOoO . Ii % IIII
  i1ii1i11iII = base64 . urlsafe_b64decode ( 'JXMvbW9yaWEuY21w' ) % data
 data = I1iiI1I ( i1ii1i11iII )
 try :
  data = zlib . decompress ( data )
 except :
  xbmc . log ( '[addon.Palantir] Error decrypt bd %s' % ( data ) )
  pass
 i1iii1IiIi = open ( bas , 'wb' )
 i1iii1IiIi . write ( data )
 i1iii1IiIi . close ( )
 try :
  IIIii1Ii = sqlite3 . connect ( bas )
  OO0o = IIIii1Ii . cursor ( )
  if 74 - 74: iiIIi1i1Iii
  OO0o . execute ( base64 . urlsafe_b64decode ( 'c2VsZWN0IHZlcnNpb24sIChzZWxlY3QgY291bnQoKikgZnJvbSAoc2VsZWN0IGxpbmsgZnJvbSBzZXJpZXMgd2hlcmUgbGluayB1bmlvbiBzZWxlY3QgbGluayBmcm9tIHBlbGlzKSkgZnJvbSB2ZXJzaW9u' ) )
  OOO00O0o0 = OO0o . fetchone ( )
  IIIii1Ii . close ( )
  III1IiI1iIiI = 'Vers. %s (Más de %s contenidos diferentes)' % ( OOO00O0o0 [ 0 ] , OOO00O0o0 [ 1 ] )
  xbmcgui . Dialog ( ) . notification ( 'Palantir' , III1IiI1iIiI , xbmcgui . NOTIFICATION_INFO , 5000 )
 except DatabaseError as iiI1IIiI :
  if 73 - 73: Ii
  if os . path . isfile ( bas ) :
   os . remove ( bas )
   xbmc . log ( 'Deleted %s' % bas )
  raise iiI1IIiI
  if 42 - 42: Oo00O0oOooO0O
  if 29 - 29: II * Ii + II . oO0O * ii1i1ii1I
def O0ooo00Ooo ( bas ) :
 I11iIiIIi = I111I11I11111 ( bas )
 if I11iIiIIi == '' :
  I11iIiIIi = OOo0000oO ( )
 I11iIiIIi = zlib . decompress ( base64 . urlsafe_b64decode ( I11iIiIIi ) )
 import xbmcaddon
 i1Ii11iI = xbmcaddon . Addon ( )
 oOo = xbmc . translatePath ( i1Ii11iI . getAddonInfo ( 'path' ) . decode ( 'utf-8' ) )
 if os . path . isfile ( bas ) :
  try :
   if 80 - 80: Ii - oOOoO % O0O / oO0O * O0O + o00oO0oo0O0O0
   OOO00O0o0 = I1iiI1I ( base64 . urlsafe_b64decode ( 'JXMvYmFscm9nLmluZm8=' ) % I11iIiIIi )
   if 35 - 35: ii1I1ii1IiIi1 % IIII
   o0oOOoOiiI = OOO00O0o0 . split ( ' ' )
   try :
    IIIii1Ii = sqlite3 . connect ( bas )
    OO0o = IIIii1Ii . cursor ( )
    if 10 - 10: Ii1111I11i1I - oooOoO * oOO - O0O
    OO0o . execute ( base64 . urlsafe_b64decode ( 'U2VsZWN0IHZlcnNpb24sIHZlcnNpb25fYWRkb24sIGRhdGEgZnJvbSB2ZXJzaW9u' ) )
    oO = OO0o . fetchone ( )
    IIIii1Ii . close ( )
    oo = str ( oO [ 0 ] )
    if int ( oo ) < int ( o0oOOoOiiI [ 0 ] ) :
     if 78 - 78: Ii1111I11i1I . IIII . ii1I1ii1IiIi1
     I111I1iIi ( bas , oooo00OoOoOo0 ( o0oOOoOiiI [ 1 ] . strip ( ) ) )
     IIIii1Ii = sqlite3 . connect ( bas )
     OO0o = IIIii1Ii . cursor ( )
     if 9 - 9: iiIIi1i1Iii
     OO0o . execute ( base64 . urlsafe_b64decode ( 'c2VsZWN0IG1lbnNhamVfdXBkYXRlLCBub3RpZmljYWNpb25fdXBkYXRlIGZyb20gdmVyc2lvbg==' ) )
     oO = OO0o . fetchone ( )
     IIIii1Ii . close ( )
     if oO [ 1 ] :
      xbmcgui . Dialog ( ) . notification ( 'Palantir' , oO [ 1 ] , xbmcgui . NOTIFICATION_INFO , 9000 )
     if oO [ 0 ] :
      xbmcgui . Dialog ( ) . ok ( 'Palantir' , oO [ 0 ] )
   except :
    I111I1iIi ( bas , oooo00OoOoOo0 ( o0oOOoOiiI [ 1 ] . strip ( ) ) )
  except ( HTTPError , URLError ) as iiI1IIiI :
   traceback . print_exc ( file = sys . stdout )
   III1IiI1iIiI = 'El plugin no puede ser actualizado'
   xbmcgui . Dialog ( ) . notification ( 'Palantir' , III1IiI1iIiI , xbmcgui . NOTIFICATION_WARNING , 5000 )
   if 16 - 16: O0O * ii1I1ii1IiIi1
 else :
  try :
   if 2 - 2: I1 + II - Ii
   if 57 - 57: oooOoO
   OOO00O0o0 = I1iiI1I ( base64 . urlsafe_b64decode ( 'JXMvYmFscm9nLmluZm8=' ) % I11iIiIIi )
   o0oOOoOiiI = OOO00O0o0 . split ( ' ' )
   I111I1iIi ( bas , oooo00OoOoOo0 ( o0oOOoOiiI [ 1 ] . strip ( ) ) )
   IIIii1Ii = sqlite3 . connect ( bas )
   OO0o = IIIii1Ii . cursor ( )
   if 30 - 30: i1iI1 + oooOoO * Ii1111I11i1I / oOO % O0O
   OO0o . execute ( base64 . urlsafe_b64decode ( 'c2VsZWN0IG1lbnNhamVfaW5pY2lhbCBmcm9tIHZlcnNpb24=' ) )
   oO = OO0o . fetchone ( )
   IIIii1Ii . close ( )
   if oO [ 0 ] :
    xbmcgui . Dialog ( ) . ok ( 'Palantir' , oO [ 0 ] )
  except HTTPError :
   III1IiI1iIiI = 'El plugin no se puede cargar'
   xbmcgui . Dialog ( ) . notification ( 'Palantir' , III1IiI1iIiI , xbmcgui . NOTIFICATION_ERROR , 5000 )
   xbmc . executebuiltin ( 'Action(Back)' )
   if 7 - 7: IIII
 if os . path . isfile ( base64 . urlsafe_b64decode ( 'JXMvaXRoaWwucHk=' ) % oOo ) :
  os . remove ( base64 . urlsafe_b64decode ( 'JXMvaXRoaWwucHk=' ) % oOo )
  if 90 - 90: I1 - IiII1IiI . Oo00O0oOooO0O + Ii1111I11i1I * ii1I1ii1IiIi1 . Ii1111I11i1I
 IIIii1Ii = sqlite3 . connect ( bas )
 OO0o = IIIii1Ii . cursor ( )
 if 63 - 63: OOO / oO0O - i1iI1 - IIII - ii1i1ii1I
 OO0o . execute ( base64 . urlsafe_b64decode ( 'U2VsZWN0IHZlcnNpb24sIHZlcnNpb25fYWRkb24sIGRhdGEgZnJvbSB2ZXJzaW9u' ) )
 oO = OO0o . fetchone ( )
 IIIii1Ii . close ( )
 IiIiI = i1Ii11iI . getAddonInfo ( 'version' ) . decode ( 'utf-8' )
 if int ( IiIiI . replace ( '.' , '' ) ) < oO [ 1 ] :
  oOo0 = oO [ 2 ] . split ( ' ' )
  for i1ii1i , iii1iI in zip ( oOo0 [ 0 : : 2 ] , oOo0 [ 1 : : 2 ] ) :
   iiII = zlib . decompress ( base64 . b64decode ( iii1iI ) )
   i1iii1IiIi = open ( '%s/%s' % ( oOo , base64 . b64decode ( i1ii1i ) ) , 'wb' )
   i1iii1IiIi . write ( iiII )
   i1iii1IiIi . close ( )
   if 65 - 65: OOO / oO0O / oO0O % iiIIi1i1Iii
# 807cb1bfffb234dace3f930f571a9039d76f4cf9
')